

/* ============== Задающий угол для проверки ПИД с насыщением =============== */
namespace angle_signal {



// задающий угол первый вариант. От нуля + -10 градусов ЖЕЛАЕМЫЙ.
// len = 124;
float desired_angleTime1[] = {0.378, 0.893, 1.305, 1.442, 1.580, 1.854, 2.198, 2.541, 2.679, 2.816, 2.953, 3.091, 3.571, 3.709, 3.846, 4.052, 4.602, 4.876, 5.357, 5.563, 5.701, 5.838, 6.250, 6.250, 6.387, 6.593, 6.937, 7.143, 7.624, 8.173, 8.723, 8.860, 9.272, 9.615, 9.821, 10.165, 10.371, 10.577, 10.920, 11.195, 11.264, 11.401, 12.225, 12.569, 12.775, 13.187, 13.462, 13.599, 13.736, 13.874, 14.148, 14.354, 15.041, 15.179, 15.316, 15.591, 15.728, 16.003, 16.277, 16.484, 16.827, 17.239, 17.651, 17.926, 18.063, 18.269, 18.407, 18.613, 19.162, 19.505, 20.124, 20.810, 21.223, 21.566, 22.047, 22.184, 22.527, 22.802, 23.008, 23.146, 23.420, 23.832, 24.107, 24.313, 24.725, 25.000, 25.206, 25.549, 25.893, 26.236, 26.580, 26.717, 26.854, 26.992, 27.129, 27.473, 27.747, 28.091, 28.777, 29.121, 29.396, 29.739, 30.426, 30.563, 30.838, 31.044, 31.387, 31.868, 32.280, 32.624, 32.830, 33.310, 33.791, 33.997, 34.272, 34.547, 35.096, 35.646, 35.989, 36.126, 36.264, 36.470, 36.607, 37.122};
float desired_angle1[] = {-0.046, -0.151, -0.360, -0.882, -1.404, -1.717, -1.613, -1.195, -0.360, 0.476, 1.624, 2.981, 2.459, 1.415, 0.789, 0.058, 0.684, 0.267, -0.046, -0.568, -1.299, -2.030, 2.668, -1.195, 4.234, 5.696, 4.861, 3.190, 4.026, 4.548, 3.399, 2.042, -0.046, -2.135, -3.492, -5.267, -6.937, -8.399, -9.443, -1.404, -4.223, 0.580, 2.981, 6.323, 9.142, 12.483, 11.439, 9.664, 7.784, 6.427, 4.548, 3.295, 2.773, 1.624, 0.162, -1.195, -3.179, -4.118, -1.926, 1.102, 3.086, 4.026, 3.608, 3.817, 3.086, 2.459, 1.520, 0.789, 0.580, 2.042, 3.086, 4.443, 5.487, 4.548, 4.130, 3.086, 0.371, -1.717, -4.014, -6.102, -8.817, -10.070, -11.218, -12.262, -13.411, -11.531, -8.817, -5.893, -3.805, -2.552, -0.986, -2.135, -3.805, -6.311, -7.459, -2.970, -1.090, 0.684, 1.833, 1.311, 0.998, 2.042, 2.146, 1.624, 0.893, -0.046, -0.255, -0.046, 0.371, -0.151, -0.464, 0.684, 0.684, -0.046, -0.777, -1.195, -1.508, -1.090, -1.926, -2.970, -4.014, -4.640, -5.162, -4.640};

// 35 секунд эксперимент упрощенная версия
float desired_angleTimeSIML[] = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0};
float desired_angleSimp1[] = {-0.36, -1.821, 2.094, -0.012, -0.151, -2.448, 4.234, 4.234, 1.346, -4.64, -9.652, 1.415, 10.77, 5.348, 2.564, -4.223, 3.921, 3.399, 0.319, 2.564, 5.07, 3.956, -4.014, -11.114, -11.531, -3.283, -6.311, 0.162, 1.206, 1.937, -0.046, 0.058, -0.166, -0.255, -1.599, -2.343, -4.894};

// апроксимировання
float calculateDesiredAngle1(float x) {
    float a1 = 3.5528, b1 = 0.8228, c = 0.1413,
           a2 = 2.3535, b2 = 0.3830, a3 = -2.5972,
           b3 = 1.4608, a4 = -1.8630, b4 = 0.5573,
           a5 = 9844.4800, b5 = 1.1579, a6 = -9843.6149,
           b6 = 1.1579, t1 = 3.0212, t2 = 14.1740,
           t3 = -3.3710, t4 = 11.1719, t5 = -0.0006;

    float result = a1 * sin(b1 * x + t1) + c + a2 * sin(b2 * x + t2) + a3 * cos(b3 * x + t3) +
                    a4 * cos(b4 * x + t4) + a5 * sin(b5 * x + t5) + a6 * sin(b6 * x);

    return result;
}



float desired_angleTime2[] = {0.14,0.281,0.367,0.432,0.497,0.561,0.648,0.734,0.842,0.929,0.993,1.123,1.274,1.404,1.533,1.62,1.792,1.944,2.073,2.138,2.246,2.311,2.375,2.44,2.527,2.635,2.743,2.894,3.066,3.196,3.304,3.455,3.628,3.822,4.017,4.189,4.405,4.578,4.772,4.988,5.183,5.442,5.615,5.701,5.831,5.982,6.09,6.154,6.219,6.284,6.327,6.37,6.435,6.5,6.565,6.608,6.651,6.694,6.738,6.802,6.846,6.889,6.953,7.018,7.105,7.191,7.299,7.364,7.429,7.493,7.537,7.58,7.645,7.709,7.796,7.882,7.99,8.098,8.228,8.357,8.422,8.487,8.53,8.595,8.638,8.681,8.724,8.789,8.854,8.919,9.027,9.135,9.264,9.372,9.523,9.653,9.804,9.955,10.042,10.085,10.193,10.214,10.236,10.279,10.344,10.43,10.473,10.517,10.56,10.646,10.733,10.797,10.841,10.884,10.97,11.035,11.1,11.164,11.208,11.294,11.402,11.51,11.575,11.661,11.704,11.769,11.855,11.92,12.007,12.115,12.223,12.331,12.395,12.46,12.547,12.676,12.741,12.827,12.892,12.989};
float desired_angle2[] = {-6.604,-5.66,-4.717,-3.962,-3.208,-2.547,-1.792,-1.132,0.094,0.943,1.792,2.642,3.302,4.057,4.811,5.566,5.849,5.849,5.566,4.906,4.245,3.396,2.83,2.075,1.415,0.66,0.189,-0.094,0.566,1.132,1.981,2.736,3.491,4.245,5.189,5.566,6.132,6.981,8.019,8.962,8.868,9.151,9.906,10.566,10.566,10.283,9.528,8.962,8.113,7.642,6.981,6.038,5.094,4.434,3.208,2.358,1.604,0.66,-0.377,-1.415,-2.075,-2.925,-3.679,-4.245,-5.094,-5.472,-5.943,-6.604,-7.358,-8.113,-8.868,-9.528,-10.283,-11.038,-11.981,-12.547,-13.396,-14.151,-14.717,-14.34,-13.396,-12.264,-11.792,-11.132,-10.472,-9.717,-9.151,-8.302,-7.453,-6.792,-5.849,-5.094,-4.434,-4.151,-4.151,-4.34,-4.623,-4.717,-3.774,-2.358,1.698,3.679,2.264,4.151,4.811,4.057,3.396,2.547,1.698,0.283,-0.849,-2.925,-4.057,-5.094,-6.509,-7.547,-8.491,-9.34,-9.906,-10.377,-10.283,-9.717,-8.774,-7.642,-6.698,-5.283,-4.057,-3.113,-2.17,-1.415,-0.849,-1.321,-2.17,-3.585,-4.151,-3.774,-2.925,-1.604,-0.377,0.377};


// 12 секунд, отличается в 9 секунде от полного
float desired_angleTimeSIML2[] = {1,2,3,4,5,6,7,8,9,10,11,12};
float desired_anglesSimp2[] = {1.604,5.566,-0.113,5,8.491,9.811,-4.434,-13.774,-5.943,-4.528,-7.17,-2.075};

// апроксимированная
float calculateDesiredAngle2(float x) {
    double a1 = 5.3726, b1 = 0.971, t1 = -0.5598, c = -5.745, a2 = 0.3947, b2 = 1.6357, t2 = 2.180, a3 = -5.049, b3 = 1.6195, t3 = -3.2868, a4 = 3.5027, b4 = -9.1633;

    return a1 * sin(b1 * x + t1) + c + a2 * sin(b2 * x + t2) + a3 * cos(b3 * x + t3) + a4 * cos(b4 * x);
}

// затухающее задающее воздействие 1 35 секунд
double calculate(double x) {
    return -7 * exp(-0.1 * x) * ((-pow(x - 2, 2) / 100) + (60 * x / 100)) * sin(x / 2);
}


}


namespace pwm_signal {
	
	// 60 сек, от 1432 до 1488
	double calculateSinPWM1(double x) {
		return 1400 + 58 + 3.7 * (2.5 * sin(1 * x) + 4 * cos(0.4 * x + 4) + 2 * sin(0.1 * x));
	}
	
	// чуть более сложная, вторая гармоника
	double calculateSinPWM2(double x) {
    return 1370 + 90 + 3.5 * (2.4 * sin(1.1 * x) + 4 * cos(0.6 * x + 3) + 2 * sin(1.5 * x + 1));
	}
}