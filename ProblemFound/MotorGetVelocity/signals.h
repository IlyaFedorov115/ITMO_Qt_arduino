

/* ============== Задающий угол для проверки ПИД с насыщением =============== */
namespace angle_signal {

  // задающий угол первый вариант. От нуля + -10 градусов ЖЕЛАЕМЫЙ.
  // len = 124;
  const float desired_angleTime1[] = {0.378, 0.893, 1.305, 1.442, 1.580, 1.854, 2.198, 2.541, 2.679, 2.816, 2.953, 3.091, 3.571, 3.709, 3.846, 4.052, 
  4.602, 4.876, 5.357, 5.563, 5.701, 5.838, 6.250, 6.250, 6.387, 6.593, 6.937, 7.143, 7.624, 8.173, 8.723, 8.860, 9.272, 9.615, 9.821, 10.165, 10.371, 
  10.577, 10.920, 11.195, 11.264, 11.401, 12.225, 12.569, 12.775, 13.187, 13.462, 13.599, 13.736, 13.874, 14.148, 14.354, 15.041, 15.179, 15.316, 15.591, 15.728, 16.003, 
  16.277, 16.484, 16.827, 17.239, 17.651, 17.926, 18.063, 18.269, 18.407, 18.613, 19.162, 19.505, 20.124, 20.810, 21.223, 21.566, 22.047, 22.184, 22.527, 22.802, 23.008, 
  23.146, 23.420, 23.832, 24.107, 24.313, 24.725, 25.000, 25.206, 25.549, 25.893, 26.236, 26.580, 26.717, 26.854, 26.992, 27.129, 27.473, 27.747, 28.091, 28.777, 29.121, 29.396, 
  29.739, 30.426, 30.563, 30.838, 31.044, 31.387, 31.868, 32.280, 32.624, 32.830, 33.310, 33.791, 33.997, 34.272, 34.547, 35.096, 35.646, 35.989, 36.126,
   36.264, 36.470, 36.607, 37.122};

  const float desired_angle1[] = {-0.046, -0.151, -0.360, -0.882, -1.404, -1.717, -1.613, -1.195, 
  -0.360, 0.476, 1.624, 2.981, 2.459, 1.415, 0.789, 0.058, 0.684, 0.267, -0.046, -0.568, -1.299, 
  -2.030, 2.668, -1.195, 4.234, 5.696, 4.861, 3.190, 4.026, 4.548, 3.399, 2.042, -0.046, -2.135, 
  -3.492, -5.267, -6.937, -8.399, -9.443, -1.404, -4.223, 0.580, 2.981, 6.323, 9.142, 12.483, 11.439, 
  9.664, 7.784, 6.427, 4.548, 3.295, 2.773, 1.624, 0.162, -1.195, -3.179, -4.118, -1.926, 1.102, 3.086, 
  4.026, 3.608, 3.817, 3.086, 2.459, 1.520, 0.789, 0.580, 2.042, 3.086, 4.443, 5.487, 4.548, 4.130, 3.086, 0.371, 
  -1.717, -4.014, -6.102, -8.817, -10.070, -11.218, -12.262, -13.411, -11.531, -8.817, -5.893, -3.805, -2.552, -0.986, 
  -2.135, -3.805, -6.311, -7.459, -2.970, -1.090, 0.684, 1.833, 1.311, 0.998, 2.042, 2.146, 1.624, 0.893, -0.046, -0.255,
   -0.046, 0.371, -0.151, -0.464, 0.684, 0.684, -0.046, -0.777, -1.195, -1.508, -1.090, -1.926, -2.970, -4.014, -4.640,   
    -5.162, -4.640};


  // 35 секунд эксперимент упрощенная версия
  float desired_angleTimeSIML[] = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0, 35.0, 36.0};
  float desired_angleSimp1[] = {-0.36, -1.821, 2.094, -0.012, -0.151, -2.448, 4.234, 4.234, 1.346, -4.64, -9.652, 1.415, 10.77, 5.348, 2.564, -4.223, 3.921, 3.399, 0.319, 2.564, 5.07, 3.956, -4.014, -11.114, -11.531, -3.283, -6.311, 0.162, 1.206, 1.937, -0.046, 0.058, -0.166, -0.255, -1.599, -2.343, -4.894};

  // апроксимированнaя
  float calculateDesiredAngle1(float x) {
      float a1 = 3.5528, b1 = 0.8228, c = 0.1413,
            a2 = 2.3535, b2 = 0.3830, a3 = -2.5972,
            b3 = 1.4608, a4 = -1.8630, b4 = 0.5573,
            a5 = 9844.4800, b5 = 1.1579, a6 = -9843.6149,
            b6 = 1.1579, t1 = 3.0212, t2 = 14.1740,
            t3 = -3.3710, t4 = 11.1719, t5 = -0.0006;

      float result = a1 * sin(b1 * x + t1) + c + a2 * sin(b2 * x + t2) + a3 * cos(b3 * x + t3) +
                      a4 * cos(b4 * x + t4) + a5 * sin(b5 * x + t5) + a6 * sin(b6 * x);

      return result;
  }


  float desired_angleTime2[] = {0.14,0.281,0.367,0.432,0.497,0.561,0.648,0.734,0.842,0.929,0.993,1.123,1.274,1.404,1.533,1.62,1.792,1.944,2.073,2.138,2.246,2.311,2.375,2.44,2.527,
                                2.635,2.743,2.894,3.066,3.196,3.304,3.455,3.628,3.822,4.017,4.189,4.405,4.578,4.772,4.988,5.183,5.442,5.615,5.701,5.831,5.982,6.09,6.154,6.219,6.284,
                                6.327,6.37,6.435,6.5,6.565,6.608,6.651,6.694,6.738,6.802,6.846,6.889,6.953,7.018,7.105,7.191,7.299,7.364,7.429,7.493,7.537,7.58,7.645,7.709,7.796,7.882,
                                7.99,8.098,8.228,8.357,8.422,8.487,8.53,8.595,8.638,8.681,8.724,8.789,8.854,8.919,9.027,9.135,9.264,9.372,9.523,9.653,9.804,9.955,10.042,10.085,10.193,
                                10.214,10.236,10.279,10.344,10.43,10.473,10.517,10.56,10.646,10.733,10.797,10.841,10.884,10.97,11.035,11.1,11.164,11.208,11.294,11.402,11.51,11.575,11.661,
                                11.704,11.769,11.855,11.92,12.007,12.115,12.223,12.331,12.395,12.46,12.547,12.676,12.741,12.827,12.892,12.989};
  float desired_angle2[] = {-6.604,-5.66,-4.717,-3.962,-3.208,-2.547,-1.792,-1.132,0.094,0.943,1.792,2.642,3.302,4.057,4.811,5.566,5.849,5.849,5.566,4.906,4.245,3.396,2.83,2.075,1.415,
                                0.66,0.189,-0.094,0.566,1.132,1.981,2.736,3.491,4.245,5.189,5.566,6.132,6.981,8.019,8.962,8.868,9.151,9.906,10.566,10.566,10.283,9.528,8.962,8.113,7.642,
                                6.981,6.038,5.094,4.434,3.208,2.358,1.604,0.66,-0.377,-1.415,-2.075,-2.925,-3.679,-4.245,-5.094,-5.472,-5.943,-6.604,-7.358,-8.113,-8.868,-9.528,-10.283,
                                -11.038,-11.981,-12.547,-13.396,-14.151,-14.717,-14.34,-13.396,-12.264,-11.792,-11.132,-10.472,-9.717,-9.151,-8.302,-7.453,-6.792,-5.849,-5.094,-4.434,
                                -4.151,-4.151,-4.34,-4.623,-4.717,-3.774,-2.358,1.698,3.679,2.264,4.151,4.811,4.057,3.396,2.547,1.698,0.283,-0.849,-2.925,-4.057,-5.094,-6.509,-7.547,
                                -8.491,-9.34,-9.906,-10.377,-10.283,-9.717,-8.774,-7.642,-6.698,-5.283,-4.057,-3.113,-2.17,-1.415,-0.849,-1.321,-2.17,-3.585,-4.151,-3.774,-2.925,-1.604,
                                -0.377,0.377};


  // 12 секунд, отличается в 9 секунде от полного
  float desired_angleTimeSIML2[] = {1,2,3,4,5,6,7,8,9,10,11,12};
  float desired_anglesSimp2[] = {1.604,5.566,-0.113,5,8.491,9.811,-4.434,-13.774,-5.943,-4.528,-7.17,-2.075};

  // апроксимированная
  float calculateDesiredAngle2(float x) {
      double a1 = 5.3726, b1 = 0.971, t1 = -0.5598, c = -5.745, a2 = 0.3947, b2 = 1.6357, t2 = 2.180, a3 = -5.049, b3 = 1.6195, t3 = -3.2868, a4 = 3.5027, b4 = -9.1633;
      return a1 * sin(b1 * x + t1) + c + a2 * sin(b2 * x + t2) + a3 * cos(b3 * x + t3) + a4 * cos(b4 * x);
  }


  // затухающее задающее воздействие 1 35 секунд
  double calculate(double x) {
      return -7 * exp(-0.1 * x) * ((-pow(x - 2, 2) / 100) + (60 * x / 100)) * sin(x / 2);
  }

}


namespace pwm_signal {
	// 60 сек, от 1432 до 1488
	double calculateSinPWM1(double x) {
		//return 1400 + 58 + 3.5 * (2.5 * sin(1 * x) + 4 * cos(0.4 * x + 4) + 2 * sin(0.1 * x));
  // пульсо образная 60 сек
 // return 1365 + 90 + 2.5 * (1.4 * sin(1.1 * x) + 4 * cos(1.6 * x + 3) + 2 * sin(1.5 * x + 1));
  
  double pi = 3.14159265359; // значение π
  return 1448 + 2 * (5 * (cos((1 + 5.0/15.0) * x - 2 * 2*pi/1 - pi)) + cos((1 + 1.0/5.0) * x + 3 * 2*pi/2));

  // гармоника 1 
 // return 1370 + 85 + 3.01 * (1.4 * sin(1.11 * x) + 4 * cos(0.6 * x + 3) + 2 * sin(1.5 * x + 1));
  // гармоника 2
  //return 1365 + 91 + 2.40 * (3.16 * sin(1.1 * x + 0.3) + 3 * cos(0.66 * x + 3) + 3 * sin(0.75 * x + 11));
  // упрощенная гармоника для проверки идентификации
  //return 1365 + 91 + 2.40 * (3.36 * sin(0.0 * x + 0.3) + 3 * cos(0.66 * x + 3) + 4 * sin(0.75 * x + 11));
	}
	
  // Псевдо двоичный ступенчатый с шагом 1 секунда
  // 101 значение - 101 сек - Старый ступенчатый, бился внизу немного
  /*
  float numbers[] = {
    1.80399659471685, -0.214180017485923, 0.243199183729241, -1.21516142231210,
    -2.05690621850288, 5.81394395110142, 9.04710455788058, 8.36114031936568,
    1.90254563070405, 12.2463670624508, 8.00116091870419, -5.14378375619624,
    -12.3047152043618, 12.1863859638041, -8.90859068056311, -1.78788298286325,
    -11.6106928179540, 11.5380152918483, -11.1239966771803, -14.0111154465885,
    -5.72819162190977, -1.96825550037208, -1.95292899950369, 8.36310380455341,
    -0.822618668244273, 2.22266577811904, 20, -1.64544511712943, -1.50124788238790,
    -0.121454762638439, 5.30479185869328, 17.9366415196936, -5.51504632008979,
    -0.648395434294775, 9.72470388939520, -0.286805657445550, -0.846252340301032,
    4.81894573120605, 5.32869259838401, 13.8914453593126, -6.65326164841099,
    -0.752627950718209, -14.7555168079014, -0.204610484772778, 2.51105040208080,
    12.2928003396715, -4.11468850488410, -12.5301879731852, 8.55605002235503,
    8.21926856959707, -3.04072723927676, 7.55179182129088, -3.44679242558544,
    -2.22009780613956, -1.90487391508640, -14.8168245191437, -10.4388454978537,
    15.3490285989274, -0.627597564371781, -14.9005796232291, -6.07654809387040,
    -8.70485542399529, -9.57890810167328, 15.5018013191821, -18.7208757982661,
    7.09290835786616, 0.320757422226904, 16.9947388078617, -4.67736484250801,
    14.8693168594482, 7.09750345431394, -0.480672515950680, -3.05718830001106,
    -14.6584673325099, -6.15593037950855, 5.47816401408878, -3.40003504934364,
    7.60096645626082, 1.28949746197820, 13.2622593834351, -4.60448059309440,
    -6.57683033970885, -3.01267832540093, -6.04123815963066, -17.4822503045710,
    15.5289827220790, 5.70969729988419, 6.67886974853614, -7.10211630554193,
    -0.154867223381497, -5.66664928191772, 10.8885474087629, 8.02621000994796,
    -1.47071864222817, -4.08351218883728, -0.988978280284643, -3.19883874479209,
    -5.35567177758196, 6.92700962409845, -3.69412797318414, 4.08921115119819
  };
  */

// ступенька 1
/* 1450 УЖЕ ЕСТЬ !!!! */
/*
float numbers[] = {
        1451.04091141961, 1454.17253832800, 1473.30471799518, 1449.42270602304, 1454.34225389773,
        1455.55803529704, 1445.45107663231, 1456.82266723988, 1445.40315599285, 1452.78129938354,
        1459.89019305274, 1452.90972394370, 1455.44786263240, 1442.41160533596, 1467.84345590632,
        1466.74486523628, 1460.56419748052, 1462.75784551790, 1456.53352797143, 1442.42862501958,
        1464.61153054755, 1459.84538481230, 1453.88278081189, 1463.79960822902, 1463.29228204158,
        1462.44834769499, 1447.84732975156, 1467.11552230274, 1453.55091755059, 1447.80504904224,
        1461.17033124103, 1445.77247860238, 1448.32877497513, 1461.28665765056, 1458.41095478400,
        1468.21322465839, 1474, 1453.59062488170, 1463.76535496714, 1470.01179602676, 1455.30820224791,
        1466.21975183961, 1446.48282861729, 1466.82180820894, 1459.49236954424, 1444.26819658680,
        1448.13790536582, 1440.01697919488, 1457.03450793967, 1462.41940538144, 1470.98628820110,
        1453.39123478393, 1466.24978455470, 1473.92055244459, 1473.19702789601, 1455.95661618430,
        1441.31565357296, 1461.45871216669, 1449.12737123668, 1442.84209276420, 1451.37636151819,
        1450.79407432988, 1461.19225758239, 1451.08750130612, 1452.91946364333, 1450.91922878710,
        1450.80235286486, 1453.30597872489, 1451.69643970894, 1460.79092866010, 1442.18133647823,
        1445.96114452153, 1450.23815349350, 1458.68475471486, 1453.41558631572, 1466.00943252780,
        1463.00643568620, 1443.57559548044, 1445.90506026181, 1469.46080164718, 1445.11694650481,
        1460.91224310889, 1456.07894183805, 1443.47285766538, 1448.00644236480, 1470.99881890114,
        1464.46232801235, 1469.52832260349, 1466.51769281161, 1463.80285339395, 1456.91144904403,
        1440.97290225971, 1465.96209172827, 1462.01625240571, 1437, 1456.95289280071, 1443.21566605590,
        1458.84382881857, 1461.65759437923, 1467.50534233050, 1457.65284148581
};
*/
// ступенька 2
/*
float numbers[] = {
        1454.18406884609, 1451.00908561360, 1446.97956467528, 1458.65086020185, 1445.69801395159,
        1454.94857782141, 1447.58084626863, 1446.37237164350, 1446.34574906262, 1452.35140130735,
        1453.47668375009, 1444.09017424635, 1454.82381689581, 1453.66238551364, 1457.93316678731,
        1461.66751421398, 1444.26878501378, 1456.69663111595, 1452.32575332135, 1455.04853159610,
        1443.52277480512, 1445.68842317046, 1437, 1458.58138185931, 1445.67003698648, 1457.51407655868,
        1462.53297762169, 1446.75183267523, 1443.65853985137, 1446.52692059942, 1449.90947695470,
        1442.75919781723, 1450.45273945913, 1446.73947290118, 1453.18287291947, 1473.68177172229,
        1450.89032398405, 1447.52334358839, 1444.00558672627, 1459.91441804802, 1444.70517793611,
        1442.76204657016, 1450.34287527836, 1447.09182958571, 1441.10346343546, 1463.88598831739,
        1456.29350479615, 1467.53139796096, 1462.92707475286, 1458.40734228574, 1450.28757078704,
        1454.41890003655, 1474, 1447.64144898851, 1445.48900542072, 1440.75118723076, 1465.35697912822,
        1463.48991362173, 1456.42709528986, 1467.57701678367, 1456.25577116557, 1453.00341244329,
        1444.85107084218, 1449.64341308441, 1450.74784867573, 1448.37776750518, 1455.62110117661,
        1447.30730795193, 1450.44977387123, 1457.76945052206, 1454.80462884630, 1464.33331212337,
        1461.80082296741, 1442.48248345859, 1459.62482981463, 1444.10034904927, 1446.38457760276,
        1452.08805234573, 1461.74576313789, 1468.64736809439, 1447.98237261655, 1455.66622542708,
        1450.04462961128, 1443.29996450760, 1454.18473170076, 1465.36716774817, 1451.13000698149,
        1461.83179232256, 1445.41840593933, 1450.98674723772, 1465.68559966785, 1458.65899197603,
        1444.98587949841, 1440.98753942341, 1462.27501473165, 1447.76986013112, 1451.11790698326,
        1455.68337825399, 1461.12483405215, 1447.58313877113, 1454.43571545532
};
*/
// ступенька 3
/*
float numbers[] = {
        1460.65910673030, 1461.49757926054, 1458.83963369537, 1458.87345875838, 1440.52604866632,
        1449.99865739736, 1439.05086267641, 1458.99697675711, 1441.73519510234, 1451.25521892865,
        1447.51654283447, 1469.38834386564, 1455.51781731722, 1457.43982019529, 1449.84536945384,
        1444.57714021871, 1457.42541873168, 1466.41756622164, 1462.18937342863, 1442.17110671613,
        1458.14375714795, 1452.05131915174, 1463.94557188527, 1454.06091407611, 1460.68597599484,
        1453.37888405645, 1442.92439451926, 1455.15473313344, 1450.20918001809, 1469.80509322885,
        1450.77205611021, 1447.71410291346, 1456.52829069602, 1460.31583723139, 1452.08237595408,
        1446.78287491909, 1461.93745136664, 1455.95455716849, 1451.47349066508, 1453.79719757056,
        1446.41900350771, 1458.22026256863, 1450.92142903150, 1458.96619988837, 1448.84376262275,
        1451.65528738873, 1452.12950886194, 1451.10807580491, 1444.73290398701, 1467.77244744001,
        1452.60106549111, 1470.47743576575, 1455.84643934049, 1457.15215540196, 1452.97671967626,
        1437, 1459.98190371807, 1455.01440670361, 1445.11101395305, 1458.39443131172, 1453.10386247144,
        1469.94587803796, 1457.61089345529, 1453.19672770551, 1450.17400397903, 1464.12300330928,
        1455.61924455984, 1450.58292690972, 1464.20527974078, 1438.62937228944, 1452.53733756135,
        1445.72092050411, 1460.49510037669, 1449.49951941400, 1462.39809901026, 1453.76782210221,
        1454.69555628783, 1453.21594153492, 1460.34726917482, 1442.88666006240, 1456.57068688193,
        1445.47056110997, 1454.85348041642, 1456.64722596671, 1446.01866200855, 1459.34356885439,
        1449.70938352002, 1452.20410740681, 1458.76455714602, 1462.29081594691, 1451.53223526867,
        1474, 1447.97389779988, 1444.34958411867, 1449.71672655428, 1456.22502727736, 1442.79957445325,
        1457.26691256930, 1438.23216363162, 1454.87329069145, 1445.24558080683
};
*/

float numbers[] = {1435, 1445, 1455, 1440, 1450, 1465, 1435, 1460, 1440, 1450, 1455, 1445, 1460, 1435}; //  75 sec

  float getNextValue() {
    static unsigned long previousMillis = 0; // Переменная для хранения предыдущего времени
    static int currentIndex = 0; // Текущий индекс массива
    static bool start = false;
    if (!start) {
      start = true;
      previousMillis = millis();
    }

    unsigned long currentMillis = millis(); // Получаем текущее время

    if (currentMillis - previousMillis >= 5000) { // Проверяем, прошел ли интервал
    previousMillis = currentMillis; // Сохраняем текущее время как предыдущее

    // Переходим к следующему элементу массива
    currentIndex = (currentIndex + 1) % (sizeof(numbers) / sizeof(numbers[0]));
    }

    return numbers[currentIndex]; // Возвращаем текущее или следующее значение массива
}

  // пошаговое увеличение для сохранения торг от угла
  int getTorgueNext() {
    static long previousMicros = 0;
    static int value = 1430;
    const int step = 2.5;
    const unsigned long interval = 6000000;
    const int maxValue = 1475;
    unsigned long currentMicros = micros(); // Получаем текущее время в микросекундах

    if (currentMicros - previousMicros >= interval) {
      previousMicros = currentMicros;
      if (value < maxValue) {
        value += step; // Увеличиваем значение на шаг
        if (value > maxValue) { // Проверяем, не превышает ли значение максимальное
          value = maxValue; // Если да, то присваиваем максимальное значение
        }
      }
    }
    return value; // Возвращаем текущее значение
  }

}